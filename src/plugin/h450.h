/* 
 * h450.h
 *
 * Header for decoding the H.450 protocol
 *
 * H.323 for Ethereal
 *
 * Copyright (c) 2002 Koninklijke Philips NV
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 *
 * The Original Code is H.323 for Ethereal.
 *
 * The Initial Developer of the Original Code is Koninklijke Philips NV.
 *
 * All Rights Reserved.
 *
 * Contributor(s): ______________________________________.
 *
 *
 */

//
// h450.h
//
// Code automatically generated by asnparse.
//

#ifndef __H450_H
#define __H450_H

#ifdef __GNUC__
#pragma interface
#endif

#include "mini_ptlib/include/ptlib/asner.h"

#ifdef USE_FOR_ETHEREAL
//extern "C" {
// use these only if the dissector is meant to be a plug-in!
//  //#include "plugins/plugin_api.h"
//}
#  include "h450_container.h"
#endif //USE_FOR_ETHEREAL

#include "h225.h"


void setH450Container( H450_Integer_Container* cont );

//
// ROS
//

class H450_Invoke;
class H450_ReturnResult;
class H450_ReturnError;
class H450_Reject;

class H450_ROS : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ROS, PASN_Choice);
#endif
  public:
    H450_ROS(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_invoke,
      e_returnResult,
      e_returnError,
      e_reject
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_Invoke &() const;
#else
    operator H450_Invoke &();
    operator const H450_Invoke &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ReturnResult &() const;
#else
    operator H450_ReturnResult &();
    operator const H450_ReturnResult &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ReturnError &() const;
#else
    operator H450_ReturnError &();
    operator const H450_ReturnError &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_Reject &() const;
#else
    operator H450_Reject &();
    operator const H450_Reject &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// GeneralProblem
//

class H450_GeneralProblem : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_GeneralProblem, PASN_Integer);
#endif
  public:
    H450_GeneralProblem(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_GeneralProblem & operator=(int v);
    H450_GeneralProblem & operator=(unsigned v);
    PObject * Clone() const;
};


//
// InvokeProblem
//

class H450_InvokeProblem : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_InvokeProblem, PASN_Integer);
#endif
  public:
    H450_InvokeProblem(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_InvokeProblem & operator=(int v);
    H450_InvokeProblem & operator=(unsigned v);
    PObject * Clone() const;
};


//
// ReturnResultProblem
//

class H450_ReturnResultProblem : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ReturnResultProblem, PASN_Integer);
#endif
  public:
    H450_ReturnResultProblem(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_ReturnResultProblem & operator=(int v);
    H450_ReturnResultProblem & operator=(unsigned v);
    PObject * Clone() const;
};


//
// ReturnErrorProblem
//

class H450_ReturnErrorProblem : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ReturnErrorProblem, PASN_Integer);
#endif
  public:
    H450_ReturnErrorProblem(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_ReturnErrorProblem & operator=(int v);
    H450_ReturnErrorProblem & operator=(unsigned v);
    PObject * Clone() const;
};


//
// RejectProblem
//

class H450_RejectProblem : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_RejectProblem, PASN_Integer);
#endif
  public:
    H450_RejectProblem(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_RejectProblem & operator=(int v);
    H450_RejectProblem & operator=(unsigned v);
    PObject * Clone() const;
};


//
// InvokeId
//

class H450_InvokeId : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_InvokeId, PASN_Integer);
#endif
  public:
    H450_InvokeId(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_InvokeId & operator=(int v);
    H450_InvokeId & operator=(unsigned v);
    PObject * Clone() const;
};


//
// Code
//

class H450_Code : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Code, PASN_Choice);
#endif
  public:
    H450_Code(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_local,
      e_global
    };

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// EntityType
//

class H450_EntityType : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_EntityType, PASN_Choice);
#endif
  public:
    H450_EntityType(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_endpoint,
      e_anyEntity
    };

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// AddressInformation
//

class H450_AddressInformation : public H225_AliasAddress
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_AddressInformation, H225_AliasAddress);
#endif
  public:
    H450_AddressInformation(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    PObject * Clone() const;
};


//
// InterpretationApdu
//

class H450_InterpretationApdu : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_InterpretationApdu, PASN_Choice);
#endif
  public:
    H450_InterpretationApdu(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_discardAnyUnrecognizedInvokePdu,
      e_clearCallIfAnyInvokePduNotRecognized,
      e_rejectAnyUnrecognizedInvokePdu
    };

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// ServiceApdus
//

class H450_ArrayOf_ROS;

class H450_ServiceApdus : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ServiceApdus, PASN_Choice);
#endif
  public:
    H450_ServiceApdus(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_rosApdus
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ArrayOf_ROS &() const;
#else
    operator H450_ArrayOf_ROS &();
    operator const H450_ArrayOf_ROS &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// InvokeIdSet
//

class H450_InvokeIdSet : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_InvokeIdSet, PASN_Integer);
#endif
  public:
    H450_InvokeIdSet(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_InvokeIdSet & operator=(int v);
    H450_InvokeIdSet & operator=(unsigned v);
    PObject * Clone() const;
};


//
// InvokeIDs
//

class H450_InvokeIDs : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_InvokeIDs, PASN_Integer);
#endif
  public:
    H450_InvokeIDs(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_InvokeIDs & operator=(int v);
    H450_InvokeIDs & operator=(unsigned v);
    PObject * Clone() const;
};


//
// PresentedAddressScreened
//

class H450_AddressScreened;
class H450_AddressScreened;

class H450_PresentedAddressScreened : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PresentedAddressScreened, PASN_Choice);
#endif
  public:
    H450_PresentedAddressScreened(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_presentationAllowedAddress,
      e_presentationRestricted,
      e_numberNotAvailableDueToInterworking,
      e_presentationRestrictedAddress
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_AddressScreened &() const;
#else
    operator H450_AddressScreened &();
    operator const H450_AddressScreened &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PresentedAddressUnscreened
//

class H450_Address;
class H450_Address;

class H450_PresentedAddressUnscreened : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PresentedAddressUnscreened, PASN_Choice);
#endif
  public:
    H450_PresentedAddressUnscreened(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_presentationAllowedAddress,
      e_presentationRestricted,
      e_numberNotAvailableDueToInterworking,
      e_presentationRestrictedAddress
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_Address &() const;
#else
    operator H450_Address &();
    operator const H450_Address &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PresentedNumberScreened
//

class H450_NumberScreened;
class H450_NumberScreened;

class H450_PresentedNumberScreened : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PresentedNumberScreened, PASN_Choice);
#endif
  public:
    H450_PresentedNumberScreened(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_presentationAllowedAddress,
      e_presentationRestricted,
      e_numberNotAvailableDueToInterworking,
      e_presentationRestrictedAddress
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_NumberScreened &() const;
#else
    operator H450_NumberScreened &();
    operator const H450_NumberScreened &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PresentedNumberUnscreened
//

class H225_PartyNumber;
class H225_PartyNumber;

class H450_PresentedNumberUnscreened : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PresentedNumberUnscreened, PASN_Choice);
#endif
  public:
    H450_PresentedNumberUnscreened(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_presentationAllowedAddress,
      e_presentationRestricted,
      e_numberNotAvailableDueToInterworking,
      e_presentationRestrictedAddress
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_PartyNumber &() const;
#else
    operator H225_PartyNumber &();
    operator const H225_PartyNumber &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PartySubaddress
//

class H450_UserSpecifiedSubaddress;
class H450_NSAPSubaddress;

class H450_PartySubaddress : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PartySubaddress, PASN_Choice);
#endif
  public:
    H450_PartySubaddress(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_userSpecifiedSubaddress,
      e_nsapSubaddress
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_UserSpecifiedSubaddress &() const;
#else
    operator H450_UserSpecifiedSubaddress &();
    operator const H450_UserSpecifiedSubaddress &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_NSAPSubaddress &() const;
#else
    operator H450_NSAPSubaddress &();
    operator const H450_NSAPSubaddress &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// NSAPSubaddress
//

class H450_NSAPSubaddress : public PASN_OctetString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_NSAPSubaddress, PASN_OctetString);
#endif
  public:
    H450_NSAPSubaddress(unsigned tag = UniversalOctetString, TagClass tagClass = UniversalTagClass);

    H450_NSAPSubaddress & operator=(const char * v);
    H450_NSAPSubaddress & operator=(const PString & v);
    H450_NSAPSubaddress & operator=(const PBYTEArray & v);
    PObject * Clone() const;
};


//
// SubaddressInformation
//

class H450_SubaddressInformation : public PASN_OctetString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_SubaddressInformation, PASN_OctetString);
#endif
  public:
    H450_SubaddressInformation(unsigned tag = UniversalOctetString, TagClass tagClass = UniversalTagClass);

    H450_SubaddressInformation & operator=(const char * v);
    H450_SubaddressInformation & operator=(const PString & v);
    H450_SubaddressInformation & operator=(const PBYTEArray & v);
    PObject * Clone() const;
};


//
// ScreeningIndicator
//

class H450_ScreeningIndicator : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ScreeningIndicator, PASN_Enumeration);
#endif
  public:
    H450_ScreeningIndicator(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_userProvidedNotScreened,
      e_userProvidedVerifiedAndPassed,
      e_userProvidedVerifiedAndFailed,
      e_networkProvided
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_ScreeningIndicator & operator=(unsigned v);
    PObject * Clone() const;
};


//
// PresentationAllowedIndicator
//

class H450_PresentationAllowedIndicator : public PASN_Boolean
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PresentationAllowedIndicator, PASN_Boolean);
#endif
  public:
    H450_PresentationAllowedIndicator(unsigned tag = UniversalBoolean, TagClass tagClass = UniversalTagClass);

    H450_PresentationAllowedIndicator & operator=(BOOL v);
    PObject * Clone() const;
};


//
// GeneralErrorList
//

class H450_GeneralErrorList : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_GeneralErrorList, PASN_Enumeration);
#endif
  public:
    H450_GeneralErrorList(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_userNotSubscribed,
      e_rejectedByNetwork,
      e_rejectedByUser,
      e_notAvailable,
      e_insufficientInformation = 5,
      e_invalidServedUserNumber,
      e_invalidCallState,
      e_basicServiceNotProvided,
      e_notIncomingCall,
      e_supplementaryServiceInteractionNotAllowed,
      e_resourceUnavailable,
      e_callFailure = 25,
      e_proceduralError = 43
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_GeneralErrorList & operator=(unsigned v);
    PObject * Clone() const;
};


//
// H225InformationElement
//

class H450_H225InformationElement : public PASN_OctetString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_H225InformationElement, PASN_OctetString);
#endif
  public:
    H450_H225InformationElement(unsigned tag = UniversalOctetString, TagClass tagClass = UniversalTagClass);

    H450_H225InformationElement & operator=(const char * v);
    H450_H225InformationElement & operator=(const PString & v);
    H450_H225InformationElement & operator=(const PBYTEArray & v);
    PObject * Clone() const;
};


//
// Extension
//

class H450_Extension : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Extension, PASN_Sequence);
#endif
  public:
    H450_Extension(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    H450_Code m_extensionId;
    PASN_OctetString m_extensionArgument;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// OperationName
//

class H450_OperationName : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_OperationName, PASN_Enumeration);
#endif
  public:
    H450_OperationName(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_holdNotific = 101,
      e_retrieveNotific,
      e_remoteHold,
      e_remoteRetrieve
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_OperationName & operator=(unsigned v);
    PObject * Clone() const;
};


//
// MixedExtension
//

class H450_Extension;
class H225_NonStandardParameter;

class H450_MixedExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MixedExtension, PASN_Choice);
#endif
  public:
    H450_MixedExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extension,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_Extension &() const;
#else
    operator H450_Extension &();
    operator const H450_Extension &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CcArg
//

class H450_CcShortArg;
class H450_CcLongArg;

class H450_CcArg : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CcArg, PASN_Choice);
#endif
  public:
    H450_CcArg(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_shortArg,
      e_longArg
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_CcShortArg &() const;
#else
    operator H450_CcShortArg &();
    operator const H450_CcShortArg &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_CcLongArg &() const;
#else
    operator H450_CcLongArg &();
    operator const H450_CcLongArg &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CallCompletionErrors
//

class H450_CallCompletionErrors : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallCompletionErrors, PASN_Enumeration);
#endif
  public:
    H450_CallCompletionErrors(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_shortTermRejection = 1010,
      e_longTermRejection,
      e_remoteUserBusyAgain,
      e_failureToMatch
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallCompletionErrors & operator=(unsigned v);
    PObject * Clone() const;
};


//
// Name
//

class H450_NamePresentationAllowed;
class H450_NamePresentationRestricted;

class H450_Name : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Name, PASN_Choice);
#endif
  public:
    H450_Name(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_namePresentationAllowed,
      e_namePresentationRestricted,
      e_nameNotAvailable
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_NamePresentationAllowed &() const;
#else
    operator H450_NamePresentationAllowed &();
    operator const H450_NamePresentationAllowed &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_NamePresentationRestricted &() const;
#else
    operator H450_NamePresentationRestricted &();
    operator const H450_NamePresentationRestricted &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// NamePresentationAllowed
//

class H450_SimpleName;
class H450_ExtendedName;

class H450_NamePresentationAllowed : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_NamePresentationAllowed, PASN_Choice);
#endif
  public:
    H450_NamePresentationAllowed(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_simpleName,
      e_extendedName
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_SimpleName &() const;
#else
    operator H450_SimpleName &();
    operator const H450_SimpleName &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtendedName &() const;
#else
    operator H450_ExtendedName &();
    operator const H450_ExtendedName &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// NamePresentationRestricted
//

class H450_SimpleName;
class H450_ExtendedName;

class H450_NamePresentationRestricted : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_NamePresentationRestricted, PASN_Choice);
#endif
  public:
    H450_NamePresentationRestricted(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_simpleName,
      e_extendedName,
      e_restrictedNull
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_SimpleName &() const;
#else
    operator H450_SimpleName &();
    operator const H450_SimpleName &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtendedName &() const;
#else
    operator H450_ExtendedName &();
    operator const H450_ExtendedName &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// SimpleName
//

class H450_SimpleName : public PASN_OctetString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_SimpleName, PASN_OctetString);
#endif
  public:
    H450_SimpleName(unsigned tag = UniversalOctetString, TagClass tagClass = UniversalTagClass);

    H450_SimpleName & operator=(const char * v);
    H450_SimpleName & operator=(const PString & v);
    H450_SimpleName & operator=(const PBYTEArray & v);
    PObject * Clone() const;
};


//
// ExtendedName
//

class H450_ExtendedName : public PASN_BMPString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ExtendedName, PASN_BMPString);
#endif
  public:
    H450_ExtendedName(unsigned tag = UniversalBMPString, TagClass tagClass = UniversalTagClass);

    H450_ExtendedName & operator=(const char * v);
    H450_ExtendedName & operator=(const PString & v);
    H450_ExtendedName & operator=(const PWORDArray & v);
    H450_ExtendedName & operator=(const PASN_BMPString & v);
    PObject * Clone() const;
};


//
// DummyRes
//

class H450_MixedExtension;

class H450_DummyRes : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_DummyRes, PASN_Array);
#endif
  public:
    H450_DummyRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H450_MixedExtension & operator[](PINDEX i) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// MWIInterrogateRes
//

class H450_MWIInterrogateResElt;

class H450_MWIInterrogateRes : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MWIInterrogateRes, PASN_Array);
#endif
  public:
    H450_MWIInterrogateRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H450_MWIInterrogateResElt & operator[](PINDEX i) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// MsgCentreId
//

class H450_EndpointAddress;

class H450_MsgCentreId : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MsgCentreId, PASN_Choice);
#endif
  public:
    H450_MsgCentreId(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_integer,
      e_partyNumber,
      e_numericString
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_EndpointAddress &() const;
#else
    operator H450_EndpointAddress &();
    operator const H450_EndpointAddress &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// NbOfMessages
//

class H450_NbOfMessages : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_NbOfMessages, PASN_Integer);
#endif
  public:
    H450_NbOfMessages(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_NbOfMessages & operator=(int v);
    H450_NbOfMessages & operator=(unsigned v);
    PObject * Clone() const;
};


//
// TimeStamp
//

class H450_TimeStamp : public PASN_GeneralisedTime
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_TimeStamp, PASN_GeneralisedTime);
#endif
  public:
    H450_TimeStamp(unsigned tag = UniversalGeneralisedTime, TagClass tagClass = UniversalTagClass);

    PObject * Clone() const;
};


//
// MessageWaitingIndicationErrors
//

class H450_MessageWaitingIndicationErrors : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MessageWaitingIndicationErrors, PASN_Enumeration);
#endif
  public:
    H450_MessageWaitingIndicationErrors(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_notActivated = 31,
      e_undefined = 2002,
      e_invalidMsgCentreId = 1018
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_MessageWaitingIndicationErrors & operator=(unsigned v);
    PObject * Clone() const;
};


//
// BasicService
//

class H450_BasicService : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_BasicService, PASN_Enumeration);
#endif
  public:
    H450_BasicService(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_allServices,
      e_speech,
      e_unrestrictedDigitalInformation,
      e_audio3100Hz,
      e_telephony = 32,
      e_teletex,
      e_telefaxGroup4Class1,
      e_videotexSyntaxBased,
      e_videotelephony
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_BasicService & operator=(unsigned v);
    PObject * Clone() const;
};


//
// ParkedToPosition
//

class H450_ParkedToPosition : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ParkedToPosition, PASN_Integer);
#endif
  public:
    H450_ParkedToPosition(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_ParkedToPosition & operator=(int v);
    H450_ParkedToPosition & operator=(unsigned v);
    PObject * Clone() const;
};


//
// ParkCondition
//

class H450_ParkCondition : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ParkCondition, PASN_Enumeration);
#endif
  public:
    H450_ParkCondition(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_unspecified,
      e_parkedToUserIdle,
      e_parkedToUserBusy,
      e_parkedToGroup
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_ParkCondition & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CallType
//

class H450_CallType : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallType, PASN_Enumeration);
#endif
  public:
    H450_CallType(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_parkedCall,
      e_alertingCall
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallType & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CallPickupErrors
//

class H450_CallPickupErrors : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallPickupErrors, PASN_Enumeration);
#endif
  public:
    H450_CallPickupErrors(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_callPickupIdInvalid = 2000,
      e_callAlreadyPickedUp,
      e_undefined
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallPickupErrors & operator=(unsigned v);
    PObject * Clone() const;
};


//
// DiversionReason
//

class H450_DiversionReason : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_DiversionReason, PASN_Enumeration);
#endif
  public:
    H450_DiversionReason(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_unknown,
      e_cfu,
      e_cfb,
      e_cfnr
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_DiversionReason & operator=(unsigned v);
    PObject * Clone() const;
};


//
// IntResultList
//

class H450_IntResult;

class H450_IntResultList : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_IntResultList, PASN_Array);
#endif
  public:
    H450_IntResultList(unsigned tag = UniversalSet, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H450_IntResult & operator[](PINDEX i) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// Procedure
//

class H450_Procedure : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Procedure, PASN_Enumeration);
#endif
  public:
    H450_Procedure(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_cfu,
      e_cfb,
      e_cfnr
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_Procedure & operator=(unsigned v);
    PObject * Clone() const;
};


//
// SubscriptionOption
//

class H450_SubscriptionOption : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_SubscriptionOption, PASN_Enumeration);
#endif
  public:
    H450_SubscriptionOption(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_noNotification,
      e_notificationWithoutDivertedToNr,
      e_notificationWithDivertedToNr
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_SubscriptionOption & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CallDiversionErrors
//

class H450_CallDiversionErrors : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallDiversionErrors, PASN_Enumeration);
#endif
  public:
    H450_CallDiversionErrors(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_invalidDivertedNumber = 12,
      e_specialServiceNumber = 14,
      e_diversionToServedUserNumber,
      e_numberOfDiversionsExceeded = 24,
      e_temporarilyUnavailable = 1000,
      e_notAuthorized = 1007,
      e_unspecified
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallDiversionErrors & operator=(unsigned v);
    PObject * Clone() const;
};


//
// DummyArg
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_DummyArg : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_DummyArg, PASN_Choice);
#endif
  public:
    H450_DummyArg(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// EndDesignation
//

class H450_EndDesignation : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_EndDesignation, PASN_Enumeration);
#endif
  public:
    H450_EndDesignation(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_primaryEnd,
      e_secondaryEnd
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_EndDesignation & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CallStatus
//

class H450_CallStatus : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallStatus, PASN_Enumeration);
#endif
  public:
    H450_CallStatus(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_answered,
      e_alerting
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallStatus & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CallIdentity
//

class H450_CallIdentity : public PASN_NumericString
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallIdentity, PASN_NumericString);
#endif
  public:
    H450_CallIdentity(unsigned tag = UniversalNumericString, TagClass tagClass = UniversalTagClass);

    H450_CallIdentity & operator=(const char * v);
    H450_CallIdentity & operator=(const PString & v);
    PObject * Clone() const;
};


//
// ExtensionSeq
//

class H450_Extension;

class H450_ExtensionSeq : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ExtensionSeq, PASN_Array);
#endif
  public:
    H450_ExtensionSeq(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H450_Extension & operator[](PINDEX i) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CallTransferOperation
//

class H450_CallTransferOperation : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallTransferOperation, PASN_Enumeration);
#endif
  public:
    H450_CallTransferOperation(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_callTransferIdentify = 7,
      e_callTransferAbandon,
      e_callTransferInitiate,
      e_callTransferSetup,
      e_callTransferUpdate = 13,
      e_subaddressTransfer,
      e_callTransferComplete = 12,
      e_callTransferActive = 11
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallTransferOperation & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CallTransferErrors
//

class H450_CallTransferErrors : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallTransferErrors, PASN_Enumeration);
#endif
  public:
    H450_CallTransferErrors(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_unspecified = 1008,
      e_invalidReroutingNumber = 1004,
      e_unrecognizedCallIdentity,
      e_establishmentFailure
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallTransferErrors & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CICapabilityLevel
//

class H450_CICapabilityLevel : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CICapabilityLevel, PASN_Integer);
#endif
  public:
    H450_CICapabilityLevel(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_CICapabilityLevel & operator=(int v);
    H450_CICapabilityLevel & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CIProtectionLevel
//

class H450_CIProtectionLevel : public PASN_Integer
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIProtectionLevel, PASN_Integer);
#endif
  public:
    H450_CIProtectionLevel(unsigned tag = UniversalInteger, TagClass tagClass = UniversalTagClass);

    H450_CIProtectionLevel & operator=(int v);
    H450_CIProtectionLevel & operator=(unsigned v);
    PObject * Clone() const;
};


//
// CIStatusInformation
//

class H450_CIStatusInformation : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIStatusInformation, PASN_Choice);
#endif
  public:
    H450_CIStatusInformation(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_callIntrusionImpending,
      e_callIntruded,
      e_callIsolated,
      e_callForceReleased,
      e_callIntrusionComplete,
      e_callIntrusionEnd
    };

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CallIntrusionErrors
//

class H450_CallIntrusionErrors : public PASN_Enumeration
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallIntrusionErrors, PASN_Enumeration);
#endif
  public:
    H450_CallIntrusionErrors(unsigned tag = UniversalEnumeration, TagClass tagClass = UniversalTagClass);

    enum Enumerations {
      e_notBusy = 1009,
      e_temporarilyUnavailable = 1000,
      e_notAuthorized = 1007
    };


#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    H450_CallIntrusionErrors & operator=(unsigned v);
    PObject * Clone() const;
};


//
// ReturnResult_result
//

class H450_ReturnResult_result : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ReturnResult_result, PASN_Sequence);
#endif
  public:
    H450_ReturnResult_result(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    H450_Code m_opcode;
    PASN_OctetString m_result;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// Reject_problem
//

class H450_GeneralProblem;
class H450_InvokeProblem;
class H450_ReturnResultProblem;
class H450_ReturnErrorProblem;

class H450_Reject_problem : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Reject_problem, PASN_Choice);
#endif
  public:
    H450_Reject_problem(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_general,
      e_invoke,
      e_returnResult,
      e_returnError
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_GeneralProblem &() const;
#else
    operator H450_GeneralProblem &();
    operator const H450_GeneralProblem &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_InvokeProblem &() const;
#else
    operator H450_InvokeProblem &();
    operator const H450_InvokeProblem &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ReturnResultProblem &() const;
#else
    operator H450_ReturnResultProblem &();
    operator const H450_ReturnResultProblem &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ReturnErrorProblem &() const;
#else
    operator H450_ReturnErrorProblem &();
    operator const H450_ReturnErrorProblem &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// ArrayOf_ROS
//

class H450_ROS;

class H450_ArrayOf_ROS : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ArrayOf_ROS, PASN_Array);
#endif
  public:
    H450_ArrayOf_ROS(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H450_ROS & operator[](PINDEX i) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// ArrayOf_AliasAddress
//

class H225_AliasAddress;

class H450_ArrayOf_AliasAddress : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ArrayOf_AliasAddress, PASN_Array);
#endif
  public:
    H450_ArrayOf_AliasAddress(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H225_AliasAddress & operator[](PINDEX i) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// ArrayOf_MixedExtension
//

class H450_MixedExtension;

class H450_ArrayOf_MixedExtension : public PASN_Array
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ArrayOf_MixedExtension, PASN_Array);
#endif
  public:
    H450_ArrayOf_MixedExtension(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    PASN_Object * CreateObject() const;
    H450_MixedExtension & operator[](PINDEX i) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// IntResult_extension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_IntResult_extension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_IntResult_extension, PASN_Choice);
#endif
  public:
    H450_IntResult_extension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTInitiateArg_argumentExtension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_CTInitiateArg_argumentExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTInitiateArg_argumentExtension, PASN_Choice);
#endif
  public:
    H450_CTInitiateArg_argumentExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTSetupArg_argumentExtension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_CTSetupArg_argumentExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTSetupArg_argumentExtension, PASN_Choice);
#endif
  public:
    H450_CTSetupArg_argumentExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTIdentifyRes_resultExtension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_CTIdentifyRes_resultExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTIdentifyRes_resultExtension, PASN_Choice);
#endif
  public:
    H450_CTIdentifyRes_resultExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTUpdateArg_argumentExtension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_CTUpdateArg_argumentExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTUpdateArg_argumentExtension, PASN_Choice);
#endif
  public:
    H450_CTUpdateArg_argumentExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// SubaddressTransferArg_argumentExtension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_SubaddressTransferArg_argumentExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_SubaddressTransferArg_argumentExtension, PASN_Choice);
#endif
  public:
    H450_SubaddressTransferArg_argumentExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTCompleteArg_argumentExtension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_CTCompleteArg_argumentExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTCompleteArg_argumentExtension, PASN_Choice);
#endif
  public:
    H450_CTCompleteArg_argumentExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTActiveArg_argumentExtension
//

class H450_ExtensionSeq;
class H225_NonStandardParameter;

class H450_CTActiveArg_argumentExtension : public PASN_Choice
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTActiveArg_argumentExtension, PASN_Choice);
#endif
  public:
    H450_CTActiveArg_argumentExtension(unsigned tag = 0, TagClass tagClass = UniversalTagClass);

    enum Choices {
      e_extensionSeq,
      e_nonStandardData
    };

#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H450_ExtensionSeq &() const;
#else
    operator H450_ExtensionSeq &();
    operator const H450_ExtensionSeq &() const;
#endif
#if defined(__GNUC__) && __GNUC__ <= 2 && __GNUC_MINOR__ < 9
    operator H225_NonStandardParameter &() const;
#else
    operator H225_NonStandardParameter &();
    operator const H225_NonStandardParameter &() const;
#endif

    BOOL CreateObject();

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// Invoke
//

class H450_Invoke : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Invoke, PASN_Sequence);
#endif
  public:
    H450_Invoke(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_linkedId,
      e_argument
    };

    PASN_Integer m_invokeId;
    H450_InvokeId m_linkedId;
    H450_Code m_opcode;
    PASN_OctetString m_argument;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// ReturnResult
//

class H450_ReturnResult : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ReturnResult, PASN_Sequence);
#endif
  public:
    H450_ReturnResult(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_result
    };

    H450_InvokeId m_invokeId;
    H450_ReturnResult_result m_result;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// ReturnError
//

class H450_ReturnError : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_ReturnError, PASN_Sequence);
#endif
  public:
    H450_ReturnError(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_parameter
    };

    H450_InvokeId m_invokeId;
    H450_Code m_errorCode;
    PASN_OctetString m_parameter;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// Reject
//

class H450_Reject : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Reject, PASN_Sequence);
#endif
  public:
    H450_Reject(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    H450_InvokeId m_invokeId;
    H450_Reject_problem m_problem;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// NetworkFacilityExtension
//

class H450_NetworkFacilityExtension : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_NetworkFacilityExtension, PASN_Sequence);
#endif
  public:
    H450_NetworkFacilityExtension(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_sourceEntityAddress,
      e_destinationEntityAddress
    };

    H450_EntityType m_sourceEntity;
    H450_AddressInformation m_sourceEntityAddress;
    H450_EntityType m_destinationEntity;
    H450_AddressInformation m_destinationEntityAddress;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// AddressScreened
//

class H450_AddressScreened : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_AddressScreened, PASN_Sequence);
#endif
  public:
    H450_AddressScreened(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_partySubaddress
    };

    H225_PartyNumber m_partyNumber;
    H450_ScreeningIndicator m_screeningIndicator;
    H450_PartySubaddress m_partySubaddress;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// NumberScreened
//

class H450_NumberScreened : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_NumberScreened, PASN_Sequence);
#endif
  public:
    H450_NumberScreened(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    H225_PartyNumber m_partyNumber;
    H450_ScreeningIndicator m_screeningIndicator;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// Address
//

class H450_Address : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_Address, PASN_Sequence);
#endif
  public:
    H450_Address(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_partySubaddress
    };

    H225_PartyNumber m_partyNumber;
    H450_PartySubaddress m_partySubaddress;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// EndpointAddress
//

class H450_EndpointAddress : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_EndpointAddress, PASN_Sequence);
#endif
  public:
    H450_EndpointAddress(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_remoteExtensionAddress
    };

    H450_ArrayOf_AliasAddress m_destinationAddress;
    H225_AliasAddress m_remoteExtensionAddress;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// UserSpecifiedSubaddress
//

class H450_UserSpecifiedSubaddress : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_UserSpecifiedSubaddress, PASN_Sequence);
#endif
  public:
    H450_UserSpecifiedSubaddress(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_oddCountIndicator
    };

    H450_SubaddressInformation m_subaddressInformation;
    PASN_Boolean m_oddCountIndicator;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// HoldNotificArg
//

class H450_HoldNotificArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_HoldNotificArg, PASN_Sequence);
#endif
  public:
    H450_HoldNotificArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionArg
    };

    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// RetrieveNotificArg
//

class H450_RetrieveNotificArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_RetrieveNotificArg, PASN_Sequence);
#endif
  public:
    H450_RetrieveNotificArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionArg
    };

    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// RemoteHoldArg
//

class H450_RemoteHoldArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_RemoteHoldArg, PASN_Sequence);
#endif
  public:
    H450_RemoteHoldArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionArg
    };

    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// RemoteHoldRes
//

class H450_RemoteHoldRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_RemoteHoldRes, PASN_Sequence);
#endif
  public:
    H450_RemoteHoldRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionRes
    };

    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// RemoteRetrieveArg
//

class H450_RemoteRetrieveArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_RemoteRetrieveArg, PASN_Sequence);
#endif
  public:
    H450_RemoteRetrieveArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionArg
    };

    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// RemoteRetrieveRes
//

class H450_RemoteRetrieveRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_RemoteRetrieveRes, PASN_Sequence);
#endif
  public:
    H450_RemoteRetrieveRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionRes
    };

    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CcRequestArg
//

class H450_CcRequestArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CcRequestArg, PASN_Sequence);
#endif
  public:
    H450_CcRequestArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_ccIdentifier,
      e_retain_sig_connection,
      e_extension
    };

    H450_EndpointAddress m_numberA;
    H450_EndpointAddress m_numberB;
    H225_CallIdentifier m_ccIdentifier;
    H450_BasicService m_service;
    PASN_Boolean m_can_retain_service;
    PASN_Boolean m_retain_sig_connection;
    H450_ArrayOf_MixedExtension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CcRequestRes
//

class H450_CcRequestRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CcRequestRes, PASN_Sequence);
#endif
  public:
    H450_CcRequestRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extension
    };

    PASN_Boolean m_retain_service;
    H450_ArrayOf_MixedExtension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CcShortArg
//

class H450_CcShortArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CcShortArg, PASN_Sequence);
#endif
  public:
    H450_CcShortArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_ccIdentifier,
      e_extension
    };

    H225_CallIdentifier m_ccIdentifier;
    H450_ArrayOf_MixedExtension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CcLongArg
//

class H450_CcLongArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CcLongArg, PASN_Sequence);
#endif
  public:
    H450_CcLongArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_numberA,
      e_numberB,
      e_ccIdentifier,
      e_service,
      e_extension
    };

    H450_EndpointAddress m_numberA;
    H450_EndpointAddress m_numberB;
    H225_CallIdentifier m_ccIdentifier;
    H450_BasicService m_service;
    H450_ArrayOf_MixedExtension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// MWIActivateArg
//

class H450_MWIActivateArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MWIActivateArg, PASN_Sequence);
#endif
  public:
    H450_MWIActivateArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_msgCentreId,
      e_nbOfMessages,
      e_originatingNr,
      e_timestamp,
      e_priority,
      e_extensionArg
    };

    H450_EndpointAddress m_servedUserNr;
    H450_BasicService m_basicService;
    H450_MsgCentreId m_msgCentreId;
    H450_NbOfMessages m_nbOfMessages;
    H450_EndpointAddress m_originatingNr;
    H450_TimeStamp m_timestamp;
    PASN_Integer m_priority;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// MWIDeactivateArg
//

class H450_MWIDeactivateArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MWIDeactivateArg, PASN_Sequence);
#endif
  public:
    H450_MWIDeactivateArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_msgCentreId,
      e_callbackReq,
      e_extensionArg
    };

    H450_EndpointAddress m_servedUserNr;
    H450_BasicService m_basicService;
    H450_MsgCentreId m_msgCentreId;
    PASN_Boolean m_callbackReq;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// MWIInterrogateArg
//

class H450_MWIInterrogateArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MWIInterrogateArg, PASN_Sequence);
#endif
  public:
    H450_MWIInterrogateArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_msgCentreId,
      e_callbackReq,
      e_extensionArg
    };

    H450_EndpointAddress m_servedUserNr;
    H450_BasicService m_basicService;
    H450_MsgCentreId m_msgCentreId;
    PASN_Boolean m_callbackReq;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// MWIInterrogateResElt
//

class H450_MWIInterrogateResElt : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_MWIInterrogateResElt, PASN_Sequence);
#endif
  public:
    H450_MWIInterrogateResElt(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_msgCentreId,
      e_nbOfMessages,
      e_originatingNr,
      e_timestamp,
      e_priority,
      e_extensionArg
    };

    H450_BasicService m_basicService;
    H450_MsgCentreId m_msgCentreId;
    H450_NbOfMessages m_nbOfMessages;
    H450_EndpointAddress m_originatingNr;
    H450_TimeStamp m_timestamp;
    PASN_Integer m_priority;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CoReqOptArg
//

class H450_CoReqOptArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CoReqOptArg, PASN_Sequence);
#endif
  public:
    H450_CoReqOptArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extension
    };

    H450_ArrayOf_MixedExtension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// RUAlertOptArg
//

class H450_RUAlertOptArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_RUAlertOptArg, PASN_Sequence);
#endif
  public:
    H450_RUAlertOptArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extension
    };

    H450_ArrayOf_MixedExtension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CfbOvrOptArg
//

class H450_CfbOvrOptArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CfbOvrOptArg, PASN_Sequence);
#endif
  public:
    H450_CfbOvrOptArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extension
    };

    H450_ArrayOf_MixedExtension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CpRequestArg
//

class H450_CpRequestArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CpRequestArg, PASN_Sequence);
#endif
  public:
    H450_CpRequestArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_parkedToPosition,
      e_extensionArg
    };

    H450_EndpointAddress m_parkingNumber;
    H450_EndpointAddress m_parkedNumber;
    H450_EndpointAddress m_parkedToNumber;
    H450_ParkedToPosition m_parkedToPosition;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CpRequestRes
//

class H450_CpRequestRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CpRequestRes, PASN_Sequence);
#endif
  public:
    H450_CpRequestRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_parkedToPosition,
      e_extensionRes
    };

    H450_EndpointAddress m_parkedToNumber;
    H450_ParkedToPosition m_parkedToPosition;
    H450_ParkCondition m_parkCondition;
    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CpSetupArg
//

class H450_CpSetupArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CpSetupArg, PASN_Sequence);
#endif
  public:
    H450_CpSetupArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_parkedToPosition,
      e_extensionArg
    };

    H450_EndpointAddress m_parkingNumber;
    H450_EndpointAddress m_parkedNumber;
    H450_EndpointAddress m_parkedToNumber;
    H450_ParkedToPosition m_parkedToPosition;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CpSetupRes
//

class H450_CpSetupRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CpSetupRes, PASN_Sequence);
#endif
  public:
    H450_CpSetupRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_parkedToPosition,
      e_extensionRes
    };

    H450_EndpointAddress m_parkedToNumber;
    H450_ParkedToPosition m_parkedToPosition;
    H450_ParkCondition m_parkCondition;
    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// GroupIndicationOnArg
//

class H450_GroupIndicationOnArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_GroupIndicationOnArg, PASN_Sequence);
#endif
  public:
    H450_GroupIndicationOnArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_parkPosition,
      e_extensionArg
    };

    H225_CallIdentifier m_callPickupId;
    H450_EndpointAddress m_groupMemberUserNr;
    H450_CallType m_retrieveCallType;
    H450_EndpointAddress m_partyToRetrieve;
    H450_EndpointAddress m_retrieveAddress;
    H450_ParkedToPosition m_parkPosition;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// GroupIndicationOnRes
//

class H450_GroupIndicationOnRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_GroupIndicationOnRes, PASN_Sequence);
#endif
  public:
    H450_GroupIndicationOnRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionRes
    };

    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// GroupIndicationOffArg
//

class H450_GroupIndicationOffArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_GroupIndicationOffArg, PASN_Sequence);
#endif
  public:
    H450_GroupIndicationOffArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionArg
    };

    H225_CallIdentifier m_callPickupId;
    H450_EndpointAddress m_groupMemberUserNr;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// GroupIndicationOffRes
//

class H450_GroupIndicationOffRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_GroupIndicationOffRes, PASN_Sequence);
#endif
  public:
    H450_GroupIndicationOffRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionRes
    };

    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PickrequArg
//

class H450_PickrequArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PickrequArg, PASN_Sequence);
#endif
  public:
    H450_PickrequArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_callPickupId,
      e_partyToRetrieve,
      e_parkPosition,
      e_extensionArg
    };

    H450_EndpointAddress m_picking_upNumber;
    H225_CallIdentifier m_callPickupId;
    H450_EndpointAddress m_partyToRetrieve;
    H450_EndpointAddress m_retrieveAddress;
    H450_ParkedToPosition m_parkPosition;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PickrequRes
//

class H450_PickrequRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PickrequRes, PASN_Sequence);
#endif
  public:
    H450_PickrequRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionRes
    };

    H225_CallIdentifier m_callPickupId;
    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PickupArg
//

class H450_PickupArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PickupArg, PASN_Sequence);
#endif
  public:
    H450_PickupArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionArg
    };

    H225_CallIdentifier m_callPickupId;
    H450_EndpointAddress m_picking_upNumber;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PickupRes
//

class H450_PickupRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PickupRes, PASN_Sequence);
#endif
  public:
    H450_PickupRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionRes
    };

    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PickExeArg
//

class H450_PickExeArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PickExeArg, PASN_Sequence);
#endif
  public:
    H450_PickExeArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionArg
    };

    H225_CallIdentifier m_callPickupId;
    H450_EndpointAddress m_picking_upNumber;
    H450_EndpointAddress m_partyToRetrieve;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// PickExeRes
//

class H450_PickExeRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_PickExeRes, PASN_Sequence);
#endif
  public:
    H450_PickExeRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extensionRes
    };

    H450_ArrayOf_MixedExtension m_extensionRes;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CpNotifyArg
//

class H450_CpNotifyArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CpNotifyArg, PASN_Sequence);
#endif
  public:
    H450_CpNotifyArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_parkingNumber,
      e_extensionArg
    };

    H450_EndpointAddress m_parkingNumber;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CpickupNotifyArg
//

class H450_CpickupNotifyArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CpickupNotifyArg, PASN_Sequence);
#endif
  public:
    H450_CpickupNotifyArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_picking_upNumber,
      e_extensionArg
    };

    H450_EndpointAddress m_picking_upNumber;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// IntResult
//

class H450_IntResult : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_IntResult, PASN_Sequence);
#endif
  public:
    H450_IntResult(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_extension
    };

    H450_EndpointAddress m_servedUserNr;
    H450_BasicService m_basicService;
    H450_Procedure m_procedure;
    H450_EndpointAddress m_divertedToAddress;
    PASN_Boolean m_remoteEnabled;
    H450_IntResult_extension m_extension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTInitiateArg
//

class H450_CTInitiateArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTInitiateArg, PASN_Sequence);
#endif
  public:
    H450_CTInitiateArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_CallIdentity m_callIdentity;
    H450_EndpointAddress m_reroutingNumber;
    H450_CTInitiateArg_argumentExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTSetupArg
//

class H450_CTSetupArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTSetupArg, PASN_Sequence);
#endif
  public:
    H450_CTSetupArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_transferringNumber,
      e_argumentExtension
    };

    H450_CallIdentity m_callIdentity;
    H450_EndpointAddress m_transferringNumber;
    H450_CTSetupArg_argumentExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTIdentifyRes
//

class H450_CTIdentifyRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTIdentifyRes, PASN_Sequence);
#endif
  public:
    H450_CTIdentifyRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_resultExtension
    };

    H450_CallIdentity m_callIdentity;
    H450_EndpointAddress m_reroutingNumber;
    H450_CTIdentifyRes_resultExtension m_resultExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTUpdateArg
//

class H450_CTUpdateArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTUpdateArg, PASN_Sequence);
#endif
  public:
    H450_CTUpdateArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_redirectionInfo,
      e_basicCallInfoElements,
      e_argumentExtension
    };

    H450_EndpointAddress m_redirectionNumber;
    PASN_BMPString m_redirectionInfo;
    H450_H225InformationElement m_basicCallInfoElements;
    H450_CTUpdateArg_argumentExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// SubaddressTransferArg
//

class H450_SubaddressTransferArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_SubaddressTransferArg, PASN_Sequence);
#endif
  public:
    H450_SubaddressTransferArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_PartySubaddress m_redirectionSubaddress;
    H450_SubaddressTransferArg_argumentExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTCompleteArg
//

class H450_CTCompleteArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTCompleteArg, PASN_Sequence);
#endif
  public:
    H450_CTCompleteArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_basicCallInfoElements,
      e_redirectionInfo,
      e_argumentExtension
    };

    H450_EndDesignation m_endDesignation;
    H450_EndpointAddress m_redirectionNumber;
    H450_H225InformationElement m_basicCallInfoElements;
    PASN_BMPString m_redirectionInfo;
    H450_CallStatus m_callStatus;
    H450_CTCompleteArg_argumentExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CTActiveArg
//

class H450_CTActiveArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CTActiveArg, PASN_Sequence);
#endif
  public:
    H450_CTActiveArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_basicCallInfoElements,
      e_connectedInfo,
      e_argumentExtension
    };

    H450_EndpointAddress m_connectedAddress;
    H450_H225InformationElement m_basicCallInfoElements;
    PASN_BMPString m_connectedInfo;
    H450_CTActiveArg_argumentExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIRequestArg
//

class H450_CIRequestArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIRequestArg, PASN_Sequence);
#endif
  public:
    H450_CIRequestArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_CICapabilityLevel m_ciCapabilityLevel;
    H450_ArrayOf_MixedExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIRequestRes
//

class H450_CIRequestRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIRequestRes, PASN_Sequence);
#endif
  public:
    H450_CIRequestRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_resultExtension
    };

    H450_CIStatusInformation m_ciStatusInformation;
    H450_ArrayOf_MixedExtension m_resultExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIGetCIPLOptArg
//

class H450_CIGetCIPLOptArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIGetCIPLOptArg, PASN_Sequence);
#endif
  public:
    H450_CIGetCIPLOptArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_ArrayOf_MixedExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIGetCIPLRes
//

class H450_CIGetCIPLRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIGetCIPLRes, PASN_Sequence);
#endif
  public:
    H450_CIGetCIPLRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_silentMonitoringPermitted,
      e_resultExtension
    };

    H450_CIProtectionLevel m_ciProtectionLevel;
    PASN_Null m_silentMonitoringPermitted;
    H450_ArrayOf_MixedExtension m_resultExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIIsOptArg
//

class H450_CIIsOptArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIIsOptArg, PASN_Sequence);
#endif
  public:
    H450_CIIsOptArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_ArrayOf_MixedExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIIsOptRes
//

class H450_CIIsOptRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIIsOptRes, PASN_Sequence);
#endif
  public:
    H450_CIIsOptRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_resultExtension
    };

    H450_ArrayOf_MixedExtension m_resultExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIFrcRelArg
//

class H450_CIFrcRelArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIFrcRelArg, PASN_Sequence);
#endif
  public:
    H450_CIFrcRelArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_CICapabilityLevel m_ciCapabilityLevel;
    H450_ArrayOf_MixedExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIFrcRelOptRes
//

class H450_CIFrcRelOptRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIFrcRelOptRes, PASN_Sequence);
#endif
  public:
    H450_CIFrcRelOptRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_resultExtension
    };

    H450_ArrayOf_MixedExtension m_resultExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIWobOptArg
//

class H450_CIWobOptArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIWobOptArg, PASN_Sequence);
#endif
  public:
    H450_CIWobOptArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_ArrayOf_MixedExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CIWobOptRes
//

class H450_CIWobOptRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CIWobOptRes, PASN_Sequence);
#endif
  public:
    H450_CIWobOptRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_resultExtension
    };

    H450_ArrayOf_MixedExtension m_resultExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CISilentArg
//

class H450_CISilentArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CISilentArg, PASN_Sequence);
#endif
  public:
    H450_CISilentArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_specificCall,
      e_argumentExtension
    };

    H450_CICapabilityLevel m_ciCapabilityLevel;
    H225_CallIdentifier m_specificCall;
    H450_ArrayOf_MixedExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CISilentOptRes
//

class H450_CISilentOptRes : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CISilentOptRes, PASN_Sequence);
#endif
  public:
    H450_CISilentOptRes(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_resultExtension
    };

    H450_ArrayOf_MixedExtension m_resultExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CINotificationArg
//

class H450_CINotificationArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CINotificationArg, PASN_Sequence);
#endif
  public:
    H450_CINotificationArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_argumentExtension
    };

    H450_CIStatusInformation m_ciStatusInformation;
    H450_ArrayOf_MixedExtension m_argumentExtension;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// CallWaitingArg
//

class H450_CallWaitingArg : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_CallWaitingArg, PASN_Sequence);
#endif
  public:
    H450_CallWaitingArg(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_nbOfAddWaitingCalls,
      e_extensionArg
    };

    PASN_Integer m_nbOfAddWaitingCalls;
    H450_ArrayOf_MixedExtension m_extensionArg;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


//
// SupplementaryService
//

class H450_SupplementaryService : public PASN_Sequence
{
#ifndef PASN_LEANANDMEAN
    PCLASSINFO(H450_SupplementaryService, PASN_Sequence);
#endif
  public:
    H450_SupplementaryService(unsigned tag = UniversalSequence, TagClass tagClass = UniversalTagClass);

    enum OptionalFields {
      e_networkFacilityExtension,
      e_interpretationApdu
    };

    H450_NetworkFacilityExtension m_networkFacilityExtension;
    H450_InterpretationApdu m_interpretationApdu;
    H450_ServiceApdus m_serviceApdu;

    PINDEX GetDataLength() const;
    BOOL Decode(PASN_Stream & strm);
    void Encode(PASN_Stream & strm) const;
#ifndef PASN_NOPRINTON
    void PrintOn(ostream & strm) const;
#endif
    Comparison Compare(const PObject & obj) const;

#ifdef USE_FOR_ETHEREAL
    void showEthereal(proto_tree *tree, tvbuff_t *tvb, unsigned int offset) const;
    void preShowEthereal( void );
    PString getSummary( void );
#endif  //USE_FOR_ETHEREAL

    PObject * Clone() const;
};


#endif // __H450_H


// End of h450.h